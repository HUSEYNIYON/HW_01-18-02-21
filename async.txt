:))
						Отличие

Главние отличие Асинхронное программирование в том что если в асинхронный метод мы палучаем некие данных во 
время получения данных основной поток сможет продолжить свою работу. Если у нас много данных и наш асинхронный
метод отправить запрос и уснет до того время который получать данные от базы данных. Для ожидания и обработка 
данных асинхронное программирование чем синхронное программирование потребляет меньше ресурсов и является более 
производительным на дистанции.

  				Асинхронное программирование на мой взгляд

В синхронном коде каждая операция ожидает окончания предыдущей. Поэтому вся программа может зависнуть, если 
одна из команд выполняется очень долго. Асинхронный код убирает блокирующую операцию из основного потока 
программы, так что она продолжает выполняться, но где-то в другом месте, а обработчик может идти дальше. 
Проще говоря, главный "процесс" ставит задачу и передает ее другому независимому "процессу". Асинхронное 
программирование успешно решает множество задач. Одна из самых важных – доступность интерфейса пользователя.
Возьмем для примера приложение, которое подбирает фильм по указанным критериям. После того как пользователь 
выбрал параметры, программа отправляет запрос на сервер. А там происходит подбор подходящих картин. 
Обработка может длиться довольно долго. Если приложение работает синхронно,то пользователь не сможет 
взаимодействовать со страницей, пока не придет результат. Он не сможет даже скроллить страницу!


   		        Асинхронное программирование – производительность async: async и await

Асинхронное программирование долгое время было царством самых опытных разработчиков с тягой к мазохизму – тех, 
кто имел достаточно свободного времени, склонность и психические способности размышлять об обратных вызовах 
(callback) из обратных вызовов в нелинейном потоке выполнения. С появлением Microsoft .NET Framework 4.5, C# 
и Visual Basic принесли асинхронность всем нам, так что простые смертные теперь могут писать асинхронные методы
почти так же легко, как синхронные. Обратные вызовы больше не нужны. Больше не нужна явная передача (marshaling)
кода из одного контекста синхронизации в другой. Больше не нужно беспокоиться как двигаются результаты 
выполнения или исключения. Нет необходимости в трюках, которые искажают средства языков программирования для 
удобства разработки асинхронного кода. Короче говоря, больше нет мороки и головной боли.


https://habr.com/ru/post/470830/#conception